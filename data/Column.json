{
   "data":[
     {
       "element_id":1,
       "system_name":"prepare_turn_player",
       "category":1,
       "priority":3,
       "parent_element": [-1],
       "child_category":[],
       "matches":[
         {
           "similar_words": ["ターンの"],
           "help_text":""
         },
         {
           "similar_words": ["プレイヤー"],
           "help_text":""
         },
         {
           "similar_words": ["保存する"],
           "help_text":""
         }
       ],
       "irregular_matches": [],
       "hint_text": "",
       "research_help_words":["c 変数宣言"],
       "move_help_text":"データの準備はループより前に行いましょう",
       "assist_text": "int型にし入れる値を、ユーザーを1、敵を2と定義すると、マス目と一致するので便利です"
     },
     {
       "element_id":2,
       "system_name":"prepare_field",
       "category":1,
       "priority":3,
       "parent_element": [-1],
       "child_category":[],
       "matches":[
         {
           "similar_words": ["マス","マルバツ"],
           "help_text":"何に保存するのか"
         },
         {
           "similar_words": ["3*3","二次元配列","3かける3","配列","データ","変数"],
           "help_text":"どういうデータなのか"
         },
         {
           "similar_words": ["保存","保持","セーブ","準備","変数","用意"],
           "help_text":"データをどうするのか"
         }
       ],
       "irregular_matches": [
         {
           "similar_words": ["int","char","float"],
           "help_text":"データの型はここでは考えないようにしましょう"
         }
       ],
       "hint_text": "あるマスが「空いているか・○が付いているか・✕が付いているか」について管理するにはどうすればいいか",
       "research_help_words":["c 二次元配列"],
       "move_help_text":"データの準備はループより前に行いましょう",
       "assist_text": "int型の二次元配列にし値を、空きマスを0、○を1、×を2として定義すると、プレイヤーのデータと一致するので便利です。\n二次元配列の添え数は[横][縦]です。何か処理をする時は二重ループを使用します。"
     },
     {
       "element_id":3,
       "system_name":"main_loop",
       "category":2,
       "priority":3,
       "parent_element": [-1],
       "child_category":[3,4,5,6,7,8,9,10],
       "matches":[
         {
           "similar_words": ["9回"],
           "help_text":""
         },
         {
           "similar_words": ["ループ"],
           "help_text":""
         }
       ],
       "irregular_matches": [],
       "hint_text": "",
       "research_help_words":["c for"],
       "move_help_text":"",
       "assist_text": "9回という回数が決まっているため、whileよりforを使用するのが良いです"
     },
     {
       "element_id":4,
       "system_name":"display_field",
       "category":3,
       "priority":3,
       "parent_element": [3],
       "child_category":[],
       "matches":[
         {
           "similar_words": ["マス目","マス","マルバツ"],
           "help_text":"何を表示するのか"
         },
         {
           "similar_words": ["表示","描画","3かける3","出力"],
           "help_text":"マス目をどうするのか"
         }
       ],
       "irregular_matches": [],
       "hint_text": "画面にはどんな処理をするのか",
       "research_help_words":["c 二次元配列","c 二重ループ","c 入出力"],
       "move_help_text":"描画はループの中の最初に行いましょう",
       "assist_text": "コンソールのため、表示は標準入出力を使用します。マス目は二次元配列なので、二重のforを使い、入っている値で出力する文字を決めましょう。"
     },
     {
       "element_id":5,
       "system_name":"if_player",
       "category":4,
       "priority":1,
       "parent_element": [3],
       "child_category":[5,6],
       "matches":[
         {
           "similar_words": ["ユーザーのターン"],
           "help_text":""
         }
       ],
       "irregular_matches": [],
       "hint_text": "",
       "research_help_words":["c if"],
       "move_help_text":"",
       "assist_text": "そのターンのプレイヤーがどちらか判定しましょう"
     },
     {
       "element_id":6,
       "system_name":"input",
       "category":5,
       "priority":3,
       "parent_element":[3,5],
       "child_category":[],
       "matches":[
         {
           "similar_words": ["マス目の","マスの","数","値","1","9"],
           "help_text":"何でマスを指定するのか"
         },
         {
           "similar_words": ["受け取","受取","入力する","入力させる"],
           "help_text":""
         }
       ],
       "irregular_matches": [
         {
           "similar_words": ["○を","丸を","まるを","マルを"],
           "help_text":"この機能は入力だけの機能としたほうがよい"
         }
       ],
       "hint_text": "○をつけるにはどういう操作が必要になるのか",
       "research_help_words":["c scanf"],
       "move_help_text":"入力はユーザーのターンのみ行いましょう",
       "assist_text": "scnaf関数は、入力を入れる変数の型に変換してくれるので、入力を受け付ける変数はint型にする"
     },
     {
       "element_id":7,
       "system_name":"user_behaviour",
       "category":6,
       "priority":3,
       "parent_element": [3,5],
       "child_category":[],
       "matches":[
         {
           "similar_words": ["○","丸","まる","マル"],
           "help_text":""
         },
         {
           "similar_words": ["入れる","配列に","データに","配列へ","データへ"],
           "help_text":"○をデータとしてどうするか考えましょう"
         }
       ],
       "irregular_matches": [
         {
           "similar_words": ["受け取","受取","入力する","入力させる"],
           "help_text":"この機能と入力は分けた方がよいです"
         },
         {
           "similar_words": ["付ける","つける","描画する","表示する"],
           "help_text":"○を表示するのは別の機能です。ここでは○のデータをどう取り扱うのか考えましょう"
         }
       ],
       "hint_text": "入力を基に何をするのか",
       "research_help_words":["c 二重ループ"],
       "move_help_text":"入力を行ってからでないと○はつけれません",
       "assist_text": "1~9の入力の値は、二重ループの変数をi,jとした時、( i*3+j )に一致します"
     },
     {
       "element_id":8,
       "system_name":"if_enemy",
       "category":7,
       "priority":1,
       "parent_element": [3],
       "child_category":[8],
       "matches":[
         {
           "similar_words": ["敵のターン"],
           "help_text":""
         }
       ],
       "irregular_matches": [],
       "hint_text": "",
       "research_help_words":["c if"],
       "move_help_text":"",
       "assist_text": "そのターンのプレイヤーがどちらか判定しましょう"
     },
     {
       "element_id":9,
       "system_name":"enemy_behaviour",
       "category":8,
       "priority":3,
       "parent_element":[3,8],
       "child_category":[],
       "matches":[
         {
           "similar_words": ["ランダム","乱数"],
           "help_text":"敵はどうやってマス目を付けるか"
         },
         {
           "similar_words": ["×","バツ","ばつ"],
           "help_text":""
         },
         {
           "similar_words": ["入れる","配列に","データに","配列へ","データへ"],
           "help_text":"✕をデータとしてどう取り扱うか考えましょう"
         }
       ],
       "irregular_matches":
       [
         {
           "similar_words": ["付ける","つける","描画する","表示する"],
           "help_text":"✕を表示するのは別の機能です。ここでは✕のデータをどう取り扱うのか考えましょう"
         }
       ],
       "hint_text": "敵の行動に必要な機能",
       "research_help_words":["c 二重ループ","c 乱数","c 無限ループ"],
       "move_help_text":"敵の行動は敵のターンにのみ行いましょう",
       "assist_text": "空いているマスに×をつける処理は幾つかやり方がありますが、無限ループの中でランダムな値を取得し、その値のマス目をチェックし、空いているマス目だった場合にのみ×を付けbreakしてループを抜ける処理が一番楽に実装できます。"
     },
     {
       "element_id":10,
       "system_name":"judge",
       "category":9,
       "priority":3,
       "parent_element": [3],
       "child_category":[],
       "matches":[
         {
           "similar_words": ["かちまけ","勝敗"],
           "help_text":"何を判定するのか"
         },
         {
           "similar_words": ["判定","判断"],
           "help_text":""
         }
       ],
       "irregular_matches": [],
       "hint_text": "毎ターン、プレイヤーがマスを埋めた後に確認すること",
       "research_help_words":["c 二重ループ"],
       "move_help_text":"勝敗判定はプレイヤーの行動が終わってからです",
       "assist_text": "垂直水平方向と斜め方向で判定します。垂直水平は二重ループを使用し順番に、斜めは配列の中央(1,1)と(0,0),(2,2)又は(2,0),(0,2)を調べましょう。\n ループを用い、短い行数で判定する方法もありますが、強引に判定しても構いません。\n勝者を入れるint型の変数を用意しておくと、この後の「勝者がいた場合ループを抜ける」機能を実装する際に便利です。"
     },
     {
       "element_id":11,
       "system_name":"clear",
       "category":10,
       "priority":3,
       "parent_element": [3],
       "child_category":[],
       "matches":[
         {
           "similar_words": ["スクリーン","画面","コンソール","文字","テキスト"],
           "help_text":""
         },
         {
           "similar_words": ["削除","消去","消す","クリア"],
           "help_text":"どんな操作をするのか"
         }
       ],
       "irregular_matches": [],
       "hint_text": "そのターンの文字のみを表示するにはどうすればいいか(動画をよく見てください)",
       "research_help_words":["c コンソール　クリア"],
       "move_help_text":"画面のクリアはターンの終わりに行い、そのターンの表示を消しましょう",
       "assist_text": "特殊なメソッドを使用し、コンソールに命令します。プログラムを実行するOSがWindowsかLinuxかどうかで命令が変わります。Repl.itの場合はLinux用の命令を使用してください"
     },
     {
       "element_id":12,
       "system_name":"break",
       "category":10,
       "priority":2,
       "parent_element": [3],
       "child_category":[],
       "matches":[
         {
           "similar_words": ["ループ"],
           "help_text":""
         },
         {
           "similar_words": ["勝者が"],
           "help_text":""
         },
         {
           "similar_words": ["出たら"],
           "help_text":""
         }
       ],
       "irregular_matches": [],
       "hint_text": "",
       "research_help_words":["c ループ　抜ける"],
       "move_help_text":"ループを抜ける判定は勝敗判定の後です",
       "assist_text": "勝者がいたかどうかをifで判定し、いた場合breakでループを抜けるとゲームが終了します"
     },
     {
       "element_id":13,
       "system_name":"switch_player",
       "category":10,
       "priority":2,
       "parent_element": [3],
       "child_category":[],
       "matches":[
         {
           "similar_words": ["終わりに"],
           "help_text":""
         },
         {
           "similar_words": ["プレイヤーを"],
           "help_text":""
         },
         {
           "similar_words": ["切り替える"],
           "help_text":""
         }
       ],
       "irregular_matches": [],
       "hint_text": "",
       "research_help_words":["c if"],
       "move_help_text":"プレイヤーの切替はターンの終わりに行いましょう",
       "assist_text": "ifを2つにせず、1つのif elseで判定と切替を行いましょう"
     },
     {
       "element_id":14,
       "system_name":"result",
       "category":11,
       "priority":2,
       "parent_element": [-1],
       "child_category":[],
       "matches":[
         {
           "similar_words": ["結果"],
           "help_text":""
         },
         {
           "similar_words": ["表示","描画","出す"],
           "help_text":""
         }
       ],
       "irregular_matches": [],
       "hint_text": "",
       "research_help_words":["c 二次元配列","c 二重ループ","c 入出力"],
       "move_help_text":"結果表示はループの外で行います",
       "assist_text": "マス目の表示と同様の表示をしましょう。\n表示した後、何か入力されるまで終了を待ちたい場合は、適当な変数とscanf関数を使いましょう"
     },
     {
       "element_id":15,
       "system_name":"prepare_result",
       "category":1,
       "priority":2,
       "parent_element": [-1],
       "child_category":[],
       "matches":[
         {
           "similar_words": ["結果"],
           "help_text":""
         },
         {
           "similar_words": ["保存","保持","セーブ","準備","変数","用意"],
           "help_text":"データをどうするのか"
         }
       ],
       "irregular_matches": [
         {
           "similar_words": ["int","char","float"],
           "help_text":"データの型はここでは考えないようにしましょう"
         }
       ],
       "hint_text": "",
       "research_help_words":["c 変数 宣言"],
       "move_help_text":"データの準備はループより前に行いましょう",
       "assist_text": "int型にし入れる値を、ユーザーを1、敵を2と定義すると、ターンのプレイヤーと一致するので便利です"
     },
     {
       "element_id":16,
       "system_name":"prepare_turn",
       "category":1,
       "priority":2,
       "parent_element": [-1],
       "child_category":[],
       "matches":[
         {
           "similar_words": ["ターン"],
           "help_text":""
         },
         {
           "similar_words": ["表示","出す","出力"],
           "help_text":""
         }
       ],
       "irregular_matches": [],
       "hint_text": "",
       "research_help_words":["c for"],
       "move_help_text":"描画はループの中の最初に行いましょう",
       "assist_text": "forのループに使用している変数は、そのままターン数になります。"
     }

   ]
}
